#!/usr/bin/env python

"""
recon.py 1.0 / 2012-2013 by mitchell <mitchell@csc.bg>.
"""
#       Copyright (c) 2012, Cyber Security Consulting, Ltd. (csc.bg)
#       All rights reserved.
#       Redistribution and use in source and binary forms, with or without
#       modification, are permitted provided that the following conditions are
#       met:
#       
#       * Redistributions of source code must retain the above copyright
#         notice, this list of conditions and the following disclaimer.
#       * Redistributions in binary form must reproduce the above
#         copyright notice, this list of conditions and the following disclaimer
#         in the documentation and/or other materials provided with the
#         distribution.
#       * Neither the name of the  nor the names of its
#         contributors may be used to endorse or promote products derived from
#         this software without specific prior written permission.
#       
#       THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#       "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#       LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#       A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#       OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#       SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#       LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#       DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#       THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#       (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
#       OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#       

import re
import argparse
from csc_utils.recon.enum import DNS_Ops
from csc_utils.recon.enum import vhost_Search
from csc_utils.recon.enum import ip_Checks

def main():

    parser = argparse.ArgumentParser()
    parser.add_argument('address', help="address can be a domain name or an IP address", type=str)
    args = parser.parse_args()
    domain = args.address
    ip_match = "[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}"
    virtual_hosts = set()
    malware_hosts = set()

    ip_match = re.search(ip_match, domain)

    if ip_match:
        print "\n==> Argument is an IP address\n"
        print("\n==> Searching for virtual hosts...\n")

        vtarget = vhost_Search(domain)

        for i in vtarget.bing_Search():
            virtual_hosts.add(i)

        for i in vtarget.sameip_Search():
            virtual_hosts.add(i)

        try:
            for i in vtarget.ewhois_Search():
                if i: virtual_hosts.add(i)
        except:
            print("There was an error searching eWhois\n")

        malware_ip_check = ip_Checks(domain)

        for i in malware_ip_check.searchMDL():
            malware_hosts.add(i)

    else:
        print "\n==> Argument is a domain name.\n"

        target = DNS_Ops(domain)

        print("==> DNS Operations in progress")

        print("\n--> {} is using the following name servers:\n").format(domain)

        for i in target.get_Name_Servers():
            print i

        print("\n--> {} resolves to:\n").format(domain)

        for i in target.host_Resolve():
            print i

        print("\n--> Attemping to perform a zone transfer for {}:\n").format(domain)

        if len(target.zone_Transfer()):
            for k,v in target.zone_Transfer().iteritems():
                print("-> Using {}:\n").format(k)

                for i in v:
                    print i

        else: print "** Cannot perform zone transfer **\n"

        print("\n==> Searching for virtual hosts...\n")

        for i in target.host_Resolve():
            vtarget = vhost_Search(i)
            malware_ip_check = ip_Checks(i)

            try:
                for i in vtarget.bing_Search():
                    virtual_hosts.add(i)
            except Exception as e:
                print("\nThere was an error searching Bing\n%s\n") % (e)

            try:
                for i in vtarget.sameip_Search():
                    virtual_hosts.add(i)
            except Exception as e:
                print("\nThere was an error searching SameIP\n%s\n") % (e)

            try:
                for i in malware_ip_check.searchMDL():
                    malware_hosts.add(i)
            except Exception as e:
                print("\nThere was an error, searching MDL:\n%s\n") %(e)

        try:
            for i in vtarget.ewhois_Search():
                if i: virtual_hosts.add(i)
        except Exception as e:
            print("\nThere was an error searching eWhois\n%s\n") % (e)

        
    for i in sorted(virtual_hosts):
        print i

    print("\n==> Searching malware domain lists...\n")

    for i in malware_hosts:
        print i

if __name__ == "__main__":
    main()
