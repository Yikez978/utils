#!/usr/bin/env python

"""
enumerate_wp_users.py 0.5 / 2012 by mitchell <dimitar.ivanov@mtr-design.com>.
"""
#       Copyright (c) 2012, MTR Design, Ltd. (mtr-design.com)
#       All rights reserved.
#       Redistribution and use in source and binary forms, with or without
#       modification, are permitted provided that the following conditions are
#       met:
#       
#       * Redistributions of source code must retain the above copyright
#         notice, this list of conditions and the following disclaimer.
#       * Redistributions in binary form must reproduce the above
#         copyright notice, this list of conditions and the following disclaimer
#         in the documentation and/or other materials provided with the
#         distribution.
#       * Neither the name of the  nor the names of its
#         contributors may be used to endorse or promote products derived from
#         this software without specific prior written permission.
#       
#       THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#       "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#       LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#       A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#       OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#       SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#       LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#       DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#       THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#       (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
#       OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#       

import re
import sys
import argparse
from lxml.html import parse
from urllib2 import urlopen,URLError
from httplib import InvalidURL
from ProgressBar import AnimatedProgressBar

def get_Options():
    """Parses the command line options."""

    parser = argparse.ArgumentParser(description='Enumerates WordPress users by requesting /?author=NUM.')
    parser.add_argument('-c', '--count', dest='usernum', help="the number of users you want to bruteforce", default=10, type=int)
    parser.add_argument('-v', '--verbose', help='print more information', action='store_true')
    parser.add_argument('-s', '--skip-verification', help='do not verify if the site is running WordPress', action='store_true')
    parser.add_argument('address', help="the URL to the WordPress installation", type=str)
    parser.add_argument('-V', '--version', action='version', version='%(prog)s 0.5 by mitchell <dimitar.ivanov@mtr-design.com>. Copyright (c) 2012, MTR Design, Ltd. (mtr-design.com)')
    args = parser.parse_args()
    if args.address.startswith('http://'):
        full_url = args.address
    elif args.address.startswith('https://'):
        full_url = args.address
    else:
        full_url = 'http://' + args.address

    return full_url.rstrip('/'), args.usernum, args.verbose, args.skip_verification

def unique(seq):
        """Returns a sorted and uniqued list"""
        set = {}
        map(set.__setitem__, seq, [])
        return sorted(set.keys())

def verify_WordPress(site, verbose):
    """Verify that the site is actually running WordPress"""

    url = site + '/wp-login.php'
    print "\n* Verifying that {} is *actually* running WordPress...".format(site)
    try:
        if verbose:
            print "--> Trying {}".format(url)
        p = urlopen(url)
        wordpress_ok = True
        print "==> Yup!"
    except(URLError) as url_err:
        if 'Name or service not known' in url_err.reason:
            print "==> Unable to resolve {}.\n==> Error: {}".format(url.split('/')[2], url_err)
            sys.exit()
        wordpress_ok = False
        print "==> WordPress not detected! You can override this detection; see help for more information.\n"

    if wordpress_ok: return wordpress_ok

def enumerate_users(domain, count, verbose):
    """Connect to the host, enumerate users"""

    end = count + 1
    users = []
    
    for i in xrange(1, end):
        url = domain + '/?author=' + str(i)
        if verbose:
            print '--> Trying {}...'.format(url)
        
        if not verbose:
            progress = AnimatedProgressBar(end=count, width=50)
        try:
            p = urlopen(url)
            page = parse(p).getroot()
            for link in page.iterlinks():
                if link[1] == 'href' and 'author' in link[2]:
                    u = re.sub('[\[\]\']', '', re.sub('/', '', re.sub('author/', '', str(re.findall('author\/.*?\/', link[2])))))
                    if u:
                        users.append(u)
        except(URLError) as url_err:
           if verbose:
                print "Cannot open {}.\nError: {}".format(url, url_err)
                if url_err.reason != 'Not Found':
                    sys.exit("Cannot access host.")
           pass
        except(InvalidURL) as inv_err:
            if verbose:
                print "{} is not a valid URL.\nError: {}".format(url, inv_err)
            pass
        if not verbose:
            progress + i
            progress.show_progress()
    print
    return unique(users)

def main():
    host,usernum,verbose,skip_verification = get_Options()
    if not skip_verification:
        if not verify_WordPress(host, verbose):
            sys.exit()
    if usernum == 1:
        print "\n* Enumerating  the first user on {}".format(host)
    else:
        print "\n* Enumerating  the first {} users on {}".format(usernum, host)

    users = enumerate_users(host, usernum, verbose)
    print "\n==> Found users:"
    if users:
        for user in users:
            print user

    print "\n* Getting the admin user..."
    try:
        print "\n==> Admin user is: {}".format(enumerate_users(host,1,verbose)[0])
    except:
        pass
if __name__ == '__main__':
    main()
