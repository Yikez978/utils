"""
recon.py 1.0 / 2012-2013 by mitchell <mitchell@csc.bg>.
"""
#       Copyright (c) 2012, Cyber Security Consulting, Ltd. (csc.bg)
#       All rights reserved.
#       Redistribution and use in source and binary forms, with or without
#       modification, are permitted provided that the following conditions are
#       met:
#       
#       * Redistributions of source code must retain the above copyright
#         notice, this list of conditions and the following disclaimer.
#       * Redistributions in binary form must reproduce the above
#         copyright notice, this list of conditions and the following disclaimer
#         in the documentation and/or other materials provided with the
#         distribution.
#       * Neither the name of the  nor the names of its
#         contributors may be used to endorse or promote products derived from
#         this software without specific prior written permission.
#       
#       THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#       "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#       LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#       A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#       OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#       SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#       LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#       DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#       THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#       (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
#       OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#       

import requests
import json
import sys
import dns.zone, dns.query, dns.resolver
import lxml.html
import urllib, urllib2
import socket

API_ID = ''
API_URL = 'https://api.datamarket.azure.com/Data.ashx/Bing/Search/v1/Web?Query=%27ip:'
API_PARAMS = '%27&$format=json&$top=500'
ewhois_email = ''
ewhois_pass = ''


class DNS_Ops(object):
    """DNS Operations"""

    def __init__ (self, host_name):
        """Constructor"""

        self.ip_addresses = set()
        self.name_servers = []
        self.host_name = host_name
        self.dns_records = {}

    def get_Name_Servers(self):
        """Returns the name servers for a domain name."""

        if self.host_name.startswith('www.'):
            self.hname = self.host_name[4:]
        else: self.hname = self.host_name
        try:
            self.nservers = dns.resolver.query(self.hname, 'NS')
        except(dns.resolver.NXDOMAIN):
            sys.exit("Cannot resolve the domain.")
        except(dns.resolver.NoAnswer):
            sys.exit("Cannot get the NS records.")
        except(dns.exception.Timeout):
            sys.exit()

        return self.nservers

    def host_Resolve(self):
        """Returns the IP address for a hostname."""

        try:
            self.a_records = dns.resolver.query(self.host_name, 'A')
        except(dns.resolver.NXDOMAIN):
            self.ip_addresses.add(self.host_name)
            return self.unique(self.ip_addresses)
        except(dns.exception.Timeout):
            pass
    
        for ipaddr in self.a_records:
            self.ip_addresses.add(ipaddr.to_text(ipaddr))
    
        return self.ip_addresses

    def zone_Transfer(self):
        """Attempts to get the DNS zone of a domain name."""

        self.records = set()

        if self.host_name.startswith('www.'):
            self.hname = self.host_name[4:]
        else: self.hname = self.host_name

        for i in self.get_Name_Servers():
            try:
                ztransfer =  dns.zone.from_xfr(dns.query.xfr(str(i), self.hname))
                for res in ztransfer:
                    record = str(res) + '.' + self.hname
                    self.records.add(record.replace('@.', ''))
                    self.dns_records[str(i)] = self.records
            except dns.exception.FormError as e:
                pass
            except EOFError as neterr:
                print("-> Unexpected reply from {}.").format(i)
                pass
            except socket.error as e:
                continue

        return self.dns_records

class vhost_Search(object):
    """Searches online databases for hostnames on the same IP address"""

    def __init__ (self, ip_address):
        self.ip_address = ip_address

    def bing_Search(self):
        """Searches Bing API"""

        self.domain_list = set()
        self.dom = requests.get(API_URL + self.ip_address + API_PARAMS, auth=(API_ID, API_ID)).json()
    
        for url in self.dom['d']['results']:
            if not 'https:' in url['DisplayUrl']:
                self.host = url['DisplayUrl'].encode('utf-8', 'ignore').split('/')[0]
                self.domain_list.add(self.host)
    
        return self.domain_list

    def sameip_Search(self):
        """Searches SameIP"""

        self.sameip_hosts = set()
        self.url = 'http://sameip.org/ip/%s' % (self.ip_address)
        self.page = urllib2.urlopen(self.url)
        self.doc = lxml.html.document_fromstring(self.page.read())
    
        for col in self.doc.cssselect('td'):
            if '.' in col.text.strip():
                self.host = col.text.strip()
                self.sameip_hosts.add(self.host)
        return self.sameip_hosts
    

    def ewhois_Search(self):
        """Searches eWhois"""

        ewhois_records = set()
        self.login_url = 'http://www.ewhois.com/login/'
        self.cookies = urllib2.HTTPCookieProcessor()
        self.opener = urllib2.build_opener(self.cookies)
        urllib2.install_opener(self.opener)
        self.opener.open(self.login_url)
        self.params = {'data[User][email]':ewhois_email, 'data[User][password]':ewhois_pass}
        self.encoded_params = urllib.urlencode(self.params)
        self.p = self.opener.open(self.login_url, self.encoded_params).read()
        self.opener.close()
    
        self.export_url = 'http://www.ewhois.com/export/ip-address/' + self.ip_address + '/'
        self.r = urllib2.urlopen(self.export_url)
        self.data = self.r.read()
        for i in self.data.strip().split('\n')[1:]:
            ewhois_records.add(i.split('"')[1])
            #if not 'displaying 0 of 0 domains' in i:
                #ewhois_records.add(i.split('"')[1])

        return ewhois_records

class ip_Checks(object):
    """ Checks the IP address against known malware lists. """

    def __init__ (self, ip):
        """Constructor"""

        self.ip_address = ip

    def searchMDL(self):
        """ Searches IP address in MDL. """

        self.mdl_url = 'http://www.malwaredomainlist.com/mdl.php?search=' + self.ip_address + '&colsearch=All&quantity=50'
        self.mdl_records = set()
        self.mdl_urls = set()

        self.page = urllib2.urlopen(self.mdl_url)
        self.doc = lxml.html.document_fromstring(self.page.read())

        for col in self.doc.cssselect('td'):
            self.host = col.text
            self.mdl_records.add(self.host)

        for i in self.mdl_records:
            if i is not None and '/' in i and not 'None' in i:
                self.mdl_urls.add(i)
        return self.mdl_urls

if __name__ == "__main__":
    main()
